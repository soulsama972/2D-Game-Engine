cmake_minimum_required(VERSION 3.12)

# define a macro that helps defining an option
macro(set_flag_option var default docString)
    set(${var} ${default} CACHE BOOL ${docString} FORCE)
endmacro()

# concat a string to variable
macro(concat var docString)
    set(${var} ${${var}} ${docString})
endmacro()

project(dog_vs_cat_game LANGUAGES CXX)

if(MINGW)
set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS}  "-static-libgcc -Wl,-static,--whole-archive -lwinpthread -Wl,--no-whole-archive")
endif()

add_compile_options(-std=c++17 -Wall)
add_compile_definitions(SFML_STATIC)

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    concat(LINK_FLAGS "-lsfml-window-d-s -lsfml-system-d-s -lsfml-graphics-d-s")
else()
    concat(LINK_FLAGS "-lsfml-window-s -lsfml-system-s -lsfml-graphics-s")
endif()

if (WIN32)
    set(EXENAME ${PROJECT_NAME}.exe)
    concat(LINK_FLAGS "-lopengl32 -lgdi32 -lwinmm")
else()
    set(EXENAME ${PROJECT_NAME})
endif()

include_directories(src)
add_subdirectory(src)

file(COPY images DESTINATION ${CMAKE_SOURCE_DIR}/build)



